//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab2.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Complex", Namespace="http://schemas.datacontract.org/2004/07/Calculator")]
    [System.SerializableAttribute()]
    public partial class Complex : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ImaginaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RealField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Imaginary {
            get {
                return this.ImaginaryField;
            }
            set {
                if ((this.ImaginaryField.Equals(value) != true)) {
                    this.ImaginaryField = value;
                    this.RaisePropertyChanged("Imaginary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Real {
            get {
                return this.RealField;
            }
            set {
                if ((this.RealField.Equals(value) != true)) {
                    this.RealField = value;
                    this.RaisePropertyChanged("Real");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        Lab2.ServiceReference1.Complex Add(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> AddAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiply", ReplyAction="http://tempuri.org/IService1/MultiplyResponse")]
        Lab2.ServiceReference1.Complex Multiply(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiply", ReplyAction="http://tempuri.org/IService1/MultiplyResponse")]
        System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> MultiplyAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Substract", ReplyAction="http://tempuri.org/IService1/SubstractResponse")]
        Lab2.ServiceReference1.Complex Substract(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Substract", ReplyAction="http://tempuri.org/IService1/SubstractResponse")]
        System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> SubstractAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Divide", ReplyAction="http://tempuri.org/IService1/DivideResponse")]
        Lab2.ServiceReference1.Complex Divide(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Divide", ReplyAction="http://tempuri.org/IService1/DivideResponse")]
        System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> DivideAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Lab2.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Lab2.ServiceReference1.IService1>, Lab2.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Lab2.ServiceReference1.Complex Add(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Add(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> AddAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.AddAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public Lab2.ServiceReference1.Complex Multiply(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Multiply(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> MultiplyAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.MultiplyAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public Lab2.ServiceReference1.Complex Substract(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Substract(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> SubstractAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.SubstractAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public Lab2.ServiceReference1.Complex Divide(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Divide(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Lab2.ServiceReference1.Complex> DivideAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.DivideAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
    }
}
