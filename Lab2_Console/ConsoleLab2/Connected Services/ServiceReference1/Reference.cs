//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleLab2.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        Calculator.Complex Add(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<Calculator.Complex> AddAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiply", ReplyAction="http://tempuri.org/IService1/MultiplyResponse")]
        Calculator.Complex Multiply(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiply", ReplyAction="http://tempuri.org/IService1/MultiplyResponse")]
        System.Threading.Tasks.Task<Calculator.Complex> MultiplyAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Substract", ReplyAction="http://tempuri.org/IService1/SubstractResponse")]
        Calculator.Complex Substract(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Substract", ReplyAction="http://tempuri.org/IService1/SubstractResponse")]
        System.Threading.Tasks.Task<Calculator.Complex> SubstractAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Divide", ReplyAction="http://tempuri.org/IService1/DivideResponse")]
        Calculator.Complex Divide(double a_real, double a_imaginary, double b_real, double b_imaginary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Divide", ReplyAction="http://tempuri.org/IService1/DivideResponse")]
        System.Threading.Tasks.Task<Calculator.Complex> DivideAsync(double a_real, double a_imaginary, double b_real, double b_imaginary);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ConsoleLab2.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ConsoleLab2.ServiceReference1.IService1>, ConsoleLab2.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Calculator.Complex Add(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Add(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Calculator.Complex> AddAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.AddAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public Calculator.Complex Multiply(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Multiply(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Calculator.Complex> MultiplyAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.MultiplyAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public Calculator.Complex Substract(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Substract(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Calculator.Complex> SubstractAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.SubstractAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public Calculator.Complex Divide(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.Divide(a_real, a_imaginary, b_real, b_imaginary);
        }
        
        public System.Threading.Tasks.Task<Calculator.Complex> DivideAsync(double a_real, double a_imaginary, double b_real, double b_imaginary) {
            return base.Channel.DivideAsync(a_real, a_imaginary, b_real, b_imaginary);
        }
    }
}
